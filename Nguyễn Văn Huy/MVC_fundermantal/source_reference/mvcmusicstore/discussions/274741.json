[
  {
    "Id": "679904",
    "ThreadId": "274741",
    "Html": "\r\n<p>The code shown on page 134:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> List&lt;Album&gt; GetTopSellingAlbums(<span style=\"color:blue\">int</span> count)\r\n        {\r\n            <span style=\"color:green\">// Group to order details by album and return</span>\r\n            <span style=\"color:green\">// the ablums with highest count</span>\r\n            <span style=\"color:blue\">return</span>  storeDB.Albums\r\n                .OrderByDescending(a =&gt; a.OrderDetails.Count())\r\n                .Take(count)\r\n                .ToList();\r\n\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>I found, when no orderdetails records, that it returns the first &quot;count&quot; records from the albums table. &nbsp;In fact if you remove the .Take(count) it returns the whole thing. &nbsp;Plus shouldn't the &quot;frequency&quot; of purchases be based on the sum of the\r\n quantity. &nbsp;For us newbie &quot;Entity Framework / Lambda Expression folks&quot; can someone show the more robust query here that would take into account the sum of the Quantity of each orderdetail record as it relates to the album? &nbsp;All of my attempts come\r\n up short and I'm not finding documentation of accomplishing this. &nbsp;The SQL would be:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">with</span> TotAlbumsSold\r\n<span style=\"color:blue\">as</span> (\r\n    <span style=\"color:blue\">select</span> od.AlbumId, <span style=\"color:magenta\">sum</span>(od.Quantity) <span style=\"color:blue\">as</span> TotSold\r\n    <span style=\"color:blue\">from</span> OrderDetails od\r\n    <span style=\"color:blue\">group</span> <span style=\"color:blue\">by</span> od.AlbumId \r\n)\r\n\r\n<span style=\"color:blue\">select</span> <span style=\"color:blue\">top</span> 5 a.*\r\n<span style=\"color:blue\">from</span> TotAlbumsSold ts <span style=\"color:blue\">inner</span> <span style=\"color:blue\">join</span>\r\n\tAlbums a <span style=\"color:blue\">on</span> ts.AlbumId = a.AlbumId\r\n<span style=\"color:blue\">order</span> <span style=\"color:blue\">by</span> ts.TotSold <span style=\"color:blue\">desc</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2011-10-04T10:30:07.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "679930",
    "ThreadId": "274741",
    "Html": "<p>I read some more and came up with this work around using \"sqlquery\", but I would still like to see the \"robust lambda expression\" that does the same thing.</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">private</span> List&lt;Album&gt; GetTopSellingAlbums(<span style=\"color: blue;\">int</span> count)\r\n        {\r\n            <span style=\"color: green;\">// Group to order details by album and return</span>\r\n            <span style=\"color: green;\">// the ablums with highest count</span>\r\n\r\n            <span style=\"color: green;\">//return  storeDB.Albums</span>\r\n            <span style=\"color: green;\">//    .OrderByDescending(a =&gt; a.OrderDetails.Count())</span>\r\n            <span style=\"color: green;\">//    .Take(count)</span>\r\n            <span style=\"color: green;\">//    .ToList();</span>\r\n\r\n            <span style=\"color: blue;\">string</span> MySql;\r\n            MySql = <span style=\"color: #a31515;\">@\"with TotAlbumsSold\r\n                    as ( \r\n                        select od.AlbumId, sum(od.Quantity) as TotSold\r\n                        from OrderDetails od\r\n                        group by od.AlbumId\r\n                        )\r\n                     select a.*\r\n                     from TotAlbumsSold ts inner join\r\n\t                 Albums a on ts.AlbumId = a.AlbumId\r\n                     order by ts.TotSold desc\"</span>;\r\n            <span style=\"color: blue;\">return</span> storeDB.Albums\r\n                .SqlQuery(MySql)\r\n                .Take(count)\r\n                .ToList();\r\n\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-10-04T11:19:36.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]