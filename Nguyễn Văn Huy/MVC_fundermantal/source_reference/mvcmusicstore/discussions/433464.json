[
  {
    "Id": "1002532",
    "ThreadId": "433464",
    "Html": "I have been stuck on this issue for a few days now and i dont know what what to do.\r<br />\n<br />\nI am able to put items into my shopping cart, sign in and the cart name gets updated from the session id to a username, but when i go to do a check out and add the name, address, and the other items required for checkout, it comes right back to the same screen when i click on submit.\r<br />\n<br />\nWhen i check the database, i see that the Order table was updated, but the OrderDetails is still blank. Also the shopping cart still has items in it.\r<br />\n<br />\nWhile trying to troubleshoot the issue, I did something else to either the controller or the model and i am no longer able to update the Order table :-(. I also noticed that the CreateOrder section of the shoppingcart never gets executed while trying to add items into the Order.. Not sure if thats due to something i did in efforts to correct the issues.. but yeah, any help would be greatly appreciated. I will post up my controllers and models after this gets posted.\r<br />\n<br />\nThanks again!<br />\n",
    "PostedDate": "2013-02-17T15:26:35.117-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1002533",
    "ThreadId": "433464",
    "Html": "ShoppingCart Controller<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing OrderCentral.Data;\nusing OrderCentral.ViewModels;\n\nnamespace OrderCentral.Controllers\n{\npublic class ShoppingCartController : Controller \n    { \n        OrderCentralDb _db = new OrderCentralDb(); \n        // \n        // GET: /ShoppingCart/ \n        public ActionResult Index() \n        { \n            var cart = ShoppingCart.GetCart(this.HttpContext); \n  \n            // Set up our ViewModel \n            var viewModel = new ShoppingCartViewModel \n            { \n                CartItems = cart.GetCartItems(), \n                CartTotal = cart.GetTotal() \n            }; \n            // Return the view \n            return View(viewModel); \n        } \n        // \n        // GET: /Store/AddToCart/5 \n        public ActionResult AddToCart(int id) \n        { \n            // Retrieve the product from the database \n            var addedProduct = _db.Products \n                .Single(products =&gt; products.ProductID == id); \n  \n            // Add it to the shopping cart \n            var cart = ShoppingCart.GetCart(this.HttpContext); \n  \n            cart.AddToCart(addedProduct); \n  \n            // Go back to the main store page for more shopping \n            return RedirectToAction(&quot;Index&quot;); \n        } \n        // \n        // AJAX: /ShoppingCart/RemoveFromCart/5 \n        [HttpPost] \n        public ActionResult RemoveFromCart(int id) \n        { \n            // Remove the item from the cart \n            var cart = ShoppingCart.GetCart(this.HttpContext); \n  \n            // Get the name of the product to display confirmation \n            string productName = _db.Carts \n                .Single(item =&gt; item.RecordId == id).Product.ProductName; \n  \n            // Remove from cart \n            int itemCount = cart.RemoveFromCart(id); \n  \n            // Display the confirmation message \n            var results = new ShoppingCartRemoveViewModel \n            {\n\n                Message = &quot;The item &quot; + Server.HtmlEncode(productName) + \n                    &quot; has been removed from your shopping cart.&quot;, \n                CartTotal = cart.GetTotal(), \n                CartCount = cart.GetCount(), \n                ItemCount = itemCount, \n                DeleteId = id \n            }; \n            return Json(results); \n        } \n        // \n        // GET: /ShoppingCart/CartSummary \n        [ChildActionOnly] \n        public ActionResult CartSummary() \n        { \n            var cart = ShoppingCart.GetCart(this.HttpContext); \n  \n            ViewData[&quot;CartCount&quot;] = cart.GetCount(); \n            return PartialView(&quot;CartSummary&quot;); \n        } \n    } \n}\n\n</code></pre>\n\n",
    "PostedDate": "2013-02-17T15:27:13.93-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1002535",
    "ThreadId": "433464",
    "Html": "Checkout Controller<br />\n<pre><code>using System;\nusing System.Linq;\nusing System.Web.Mvc;\nusing OrderCentral.Models;\nusing OrderCentral.Data;\nusing OrderCentral.ViewModels;\n\nnamespace OrderCentral.Controllers\n{\n    [Authorize]\n    public class CheckoutController : Controller\n    {\n        OrderCentralDb storeDB = new OrderCentralDb();\n        \n        //\n        // GET: /Checkout/AddressAndPayment\n\n        public ActionResult AddressAndPayment()\n        {\n            return View();\n        }\n\n        //\n        // POST: /Checkout/AddressAndPayment\n\n        [HttpPost]\n        public ActionResult AddressAndPayment(FormCollection values)\n        {\n            var order = new Order();\n            TryUpdateModel(order);\n\n            try\n            {\n                \n                    order.Username = User.Identity.Name;\n                    order.OrderDate = DateTime.Now;\n\n                    //Save Order\n                    storeDB.Orders.Add(order);\n                    storeDB.SaveChanges();\n\n                    //Process the order\n                    var cart = ShoppingCart.GetCart(this.HttpContext);\n                    cart.CreateOrder(order);\n\n                    return RedirectToAction(&quot;Complete&quot;,\n                        new { id = order.OrderId });\n                }\n\n            \n            catch\n            {\n                //Invalid - redisplay with errors\n                return View(order);\n            }\n        }\n\n        //\n        // GET: /Checkout/Complete\n\n        public ActionResult Complete(int id)\n        {\n            // Validate customer owns this order\n            bool isValid = storeDB.Orders.Any(\n                o =&gt; o.OrderId == id &amp;&amp;\n                o.Username == User.Identity.Name);\n\n            if (isValid)\n            {\n                return View(id);\n            }\n            else\n            {\n                return View(&quot;Error&quot;);\n            }\n        }\n    }\n}\n</code></pre>\n\n",
    "PostedDate": "2013-02-17T15:28:03.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1002536",
    "ThreadId": "433464",
    "Html": "ShoppingCart Model<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing OrderCentral.Data;\nusing OrderCentral.ViewModels;\nusing OrderCentral.Models;\n\nnamespace OrderCentral.ViewModels\n{\n    public partial class ShoppingCart\n    {\n        OrderCentralDb _db = new OrderCentralDb();\n        \n        string ShoppingCartId { get; set; }\n        \n        public const string CartSessionKey = &quot;CartId&quot;;\n        \n        public static ShoppingCart GetCart(HttpContextBase context)\n        {\n            var cart = new ShoppingCart();\n            cart.ShoppingCartId = cart.GetCartId(context);\n            return cart;\n        }\n        \n        // Helper method to simplify shopping cart calls \n        public static ShoppingCart GetCart(Controller controller)\n        {\n            return GetCart(controller.HttpContext);\n        }\n        \n        public void AddToCart(Products products)\n        {\n            // Get the matching cart and product instances \n            var cartItem = _db.Carts.SingleOrDefault(\n                c =&gt; c.CartId == ShoppingCartId \n                &amp;&amp; c.ProductID == products.ProductID);\n\n            if (cartItem == null)\n            {\n                // Create a new cart item if no cart item exists \n                cartItem = new Cart\n                {\n                    ProductID = products.ProductID,\n                    CartId = ShoppingCartId,\n                    Count = 1,\n                    DateCreated = DateTime.Now\n                };\n\n                _db.Carts.Add(cartItem);\n            }\n            else\n            {\n                // If the item does exist in the cart,  \n                // then add one to the quantity \n                cartItem.Count++;\n            }\n        \n            // Save changes \n            _db.SaveChanges();\n        }\n\n        public int RemoveFromCart(int id)\n        {\n            // Get the cart \n            var cartItem = _db.Carts.Single(\n                cart =&gt; cart.CartId == ShoppingCartId\n                &amp;&amp; cart.RecordId == id);\n\n            int itemCount = 0;\n\n            if (cartItem != null)\n            {\n                if (cartItem.Count &gt; 1)\n                {\n                    cartItem.Count--;\n                    itemCount = cartItem.Count;\n                }\n                else\n                {\n                    _db.Carts.Remove(cartItem);\n                }\n                \n                // Save changes \n                _db.SaveChanges();\n            }\n            return itemCount;\n        }\n        public void EmptyCart()\n        {\n            var cartItems = _db.Carts.Where(cart =&gt; cart.CartId == ShoppingCartId);\n\n            foreach (var cartItem in cartItems)\n            {\n                _db.Carts.Remove(cartItem);\n            }\n        \n            // Save changes \n            _db.SaveChanges();\n        }\n\n        public List&lt;Cart&gt; GetCartItems()\n        {\n            return _db.Carts.Where(cart =&gt; cart.CartId == ShoppingCartId).ToList();\n        }\n        public int GetCount()\n        {\n            // Get the count of each item in the cart and sum them up \n            int? count = (from cartItems in _db.Carts\n                          where cartItems.CartId == ShoppingCartId\n                          select (int?)cartItems.Count).Sum();\n            // Return 0 if all entries are null \n            return count ?? 0;\n        }\n        public decimal GetTotal()\n        {\n            // Multiply album price by count of that album to get  \n            // the current price for each of those albums in the cart \n            // sum all album price totals to get the cart total \n            decimal? total = (from cartItems in _db.Carts\n                              where cartItems.CartId == ShoppingCartId\n                              select (int?)cartItems.Count * cartItems.Product.ProductPrice).Sum();\n            return total ?? decimal.Zero;\n        }\n     \n        public int CreateOrder(Order order)\n        {\n            decimal orderTotal = 0;\n\n            var cartItems = GetCartItems();\n            // Iterate over the items in the cart, adding the order details for each \n            foreach (var item in cartItems)\n            {\n                var orderDetails = new OrderDetail\n                {\n                    ProductName = item.ProductID,\n                    OrderId = order.OrderId,\n                    ProductPrice = item.Product.ProductPrice,\n                    Quantity = item.Count\n                };\n            \n                // Set the order total of the shopping cart \n                orderTotal += (item.Count * item.Product.ProductPrice);\n\n                _db.OrderDetails.Add(orderDetails);\n                \n            }\n\n            // Set the order's total to the orderTotal count \n            order.Total = orderTotal;\n\n            // Save the order \n            _db.SaveChanges();\n            \n            // Empty the shopping cart \n            EmptyCart();\n        \n            // Return the OrderId as the confirmation number \n            return order.OrderId;\n        }\n\n        // We're using HttpContextBase to allow access to cookies. \n        public string GetCartId(HttpContextBase context)\n        {\n            if (context.Session[CartSessionKey] == null)\n            {\n                if (!string.IsNullOrWhiteSpace(context.User.Identity.Name))\n                {\n                    context.Session[CartSessionKey] = context.User.Identity.Name;\n                }\n                else\n                {\n                    // Generate a new random GUID using System.Guid class \n                    Guid tempCartId = Guid.NewGuid();\n                    \n                    // Send tempCartId back to client as a cookie \n                    context.Session[CartSessionKey] = tempCartId.ToString();\n                }\n            }\n            return context.Session[CartSessionKey].ToString();\n        }\n        // When a user has logged in, migrate their shopping cart to \n        // be associated with their username \n        public void MigrateCart(string userName)\n        {\n            var shoppingCart = _db.Carts.Where(c =&gt; c.CartId == ShoppingCartId);\n\n            foreach (Cart item in shoppingCart)\n            {\n                item.CartId = userName;\n            }\n            _db.SaveChanges();\n        }\n    }\n}</code></pre>\n\n",
    "PostedDate": "2013-02-17T15:29:14.963-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1081642",
    "ThreadId": "433464",
    "Html": "Hey, \r<br />\n<br />\nI know it's been a while since you posted this, but I've encountered the same issue as you, and I'm wondering if you ever managed to solve it?<br />\n",
    "PostedDate": "2013-08-17T07:59:42.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]