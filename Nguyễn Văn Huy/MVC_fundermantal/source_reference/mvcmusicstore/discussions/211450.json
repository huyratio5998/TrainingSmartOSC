[
  {
    "Id": "438574",
    "ThreadId": "211450",
    "Html": "<p>I'm enjoying the tutorial and learning quite a bit about MVC 2 and ASP.NET's MVC implementation.</p>\r\n<p>As for the tutorial.&nbsp; I've stepped through most of it with complete success (and hopefully some understanding), up until now and the Data Annotation's section (p. 60).</p>\r\n<p>I've added the code for the partial Album class and the metadata class.&nbsp; This all makes sense, I think I understand what it's supposed to do, however, I think I missed something.</p>\r\n<p>The &quot;create&quot; form looks fine when displayed.&nbsp; To check the data annotation code, I simply press &quot;Create&quot; with no Album title, nor a price (still 0).&nbsp; I then get an ConstraintException.&nbsp; I'm assuming that this is because the album title is empty and the title field in the album table does not allow &quot;NULL&quot;.&nbsp; This is caught in the generated code in StoreDB.Designer.cs.&nbsp; When I ignore the exception, I then get to the form with the errors highlighted in red with the annotations as expected.</p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">As a further test, I entered a title, but no price.&nbsp; This time there's no ConstraintException, however, the price validation is not caught and the record is created.</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">As yet another test, I changed the display names for the drop down lists to see if there would be a change on the form.&nbsp; There was none.</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">Does anyone have any thoughts regarding what I might have missed?&nbsp; Everything compiles just fine, and so far everything up to this point in the tutorial is working just fine as well.</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">Thanks in advance.</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">Update: It seems as if the code is first going to the main (generated) MvcMusicStore.Models.Album class before the partial class containing the metadata album class.&nbsp; The above ConstraintException occurs on the simple assignment of the textbox to the title member variable.</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">How does one make sure that the partial class is checked first so that the fields are validated before the actual object.</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">OR</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">Does one turn off the offending exceptions somehow (seems like a bad idea).</span></span></p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Segoe UI;font-size:x-small\">Bill</span></span></p>",
    "PostedDate": "2010-05-03T17:45:03.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "439615",
    "ThreadId": "211450",
    "Html": "<p>I have the exact same question. Why do we have to rely on the database throwing exceptions for validation?</p>\r\n<p>ASP.NET Web Forms has a property called Page.IsValid, which you add to the Button handler in code behind. Is there something like Page.IsValid in MVC?</p>",
    "PostedDate": "2010-05-05T18:45:04.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440936",
    "ThreadId": "211450",
    "Html": "<p>@aboreham: there is ModelState.IsValid - which is somewhat similar. I think the important distinction is that Web Forms adds a lot of &quot;automagic&quot; to validate fields on the page. MVC is much cleaner in separating client validation from server validation (of course, you can validate specific fields in AJAXy way, if you want).</p>\r\n<p>The tutorial doesn't go into client validation which is generally done through JavaScript (MVC project includes jquery.validate that does most of validation coding for you); therefore Button handler is irrelevant here. You click the button <em><strong>before</strong></em> server-side validation happens.</p>\r\n<p>@billbris: You shouldn't be getting ConstraintException... it means that you got all the way to the database; and you should only get to the data annotation layer in the model. The second case - where the record was created confirms that the attributes on the data annotation class do not kick in!</p>",
    "PostedDate": "2010-05-09T22:31:26.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440948",
    "ThreadId": "211450",
    "Html": "<p>Don't you still need server side validation in case javascript is turned off?</p>",
    "PostedDate": "2010-05-09T23:31:01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440959",
    "ThreadId": "211450",
    "Html": "<p>You (usually) do... not sure what in my post lead you to believe that you don't. In fact, the tutorial deals mainly with server-side validation (with exception of Html.EnableClientValidation call)</p>\r\n<p>Generally speaking, client-side vs. server side &quot;validation&quot; is not as black-and-white issue as may seem. See Brad Wilson's <a href=\"http://bradwilson.typepad.com/blog/2010/01/input-validation-vs-model-validation-in-aspnet-mvc.html\">post</a> for more details. But I am not sure how this applies to this discussion. Perhaps, your experience with WinForms leads to confusion; not clarification.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-10T00:01:46.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "441316",
    "ThreadId": "211450",
    "Html": "<p>Thanks, @vishu. To summarize and add a bit:</p>\r\n<ul>\r\n<li>Client validation is <em>very</em> easy to enable (see p. 63) and should catch most errors on the client rather than in your server-side code</li>\r\n<li>Client validaiton and server validation are complimentary - you don't need to pick one or the other. If you have client validation enabled and your user has Javascript turned off, server validation will continue to work as if client validation wasn't enabled</li>\r\n<li>ModelState.IsValid will allow you to check if your model is valid without throwing an exception.</li>\r\n</ul>\r\n<p>@billbris - The exception you're seeing is caused in the StoreDB.SaveChanges() call. At that point, it would be possible to check ModelState.IsValid before saving changes to avoid getting that exception.&nbsp;I didn't do that in the interest of simplicity. If the model is valid but the database update fails for some other reason, we will still need to redisplay the form, and I wanted to reduce multiple code branches that would have to redisplay the form. It is less efficient, but simplifies the code a good amount. I should probably put a note in the tutorial to explain that, though.</p>",
    "PostedDate": "2010-05-10T22:43:24.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442323",
    "ThreadId": "211450",
    "Html": "<p>Hi Jon,</p>\r\n<p>Firstly, thank you for the wonderful tutorial. I've been following it with success and it has proven to be really helpful... up until this particular problem.</p>\r\n<p>Going by your advice, I've added a ModelState.IsValid check in the controller to see if this would fix things, but unfortunately I'm still getting a ConstraintException when I'm trying to edit an Album, and I blank out the Title field. Here's my controller code:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ModelState.IsValid)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UpdateModel(album, &quot;Album&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; storeDB.SaveChanges();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return RedirectToAction(&quot;Index&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>and here's my validation just to be 100%:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Required(ErrorMessage = &quot;An Album Title is required&quot;)]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [StringLength(160)]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public object Title { get; set; }</p>\r\n<p>If i ignore the exception and go back to the form, I can see the field validation appear perfectly fine. I've also tried moving the UpdateModel call outside the if statement to see if that would fix things but I get the same results. Any help would be appreciated!</p>",
    "PostedDate": "2010-05-12T18:05:06.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "448476",
    "ThreadId": "211450",
    "Html": "<p>Jon, thanks for the insights.</p>\r\n<p>I have added some ModelState code into my [HttpPost] Create album code.&nbsp; The curious thing was that I still received the same exception.&nbsp;</p>\r\n<p>I put the code for the Album metadata class, and partial class Album into Models\\Album.cs (same directory as StoreMDB.edmx).</p>\r\n<p>I then changed the [DisplayName] for the artist and genre to &quot;ArtistX&quot; and &quot;GenreY&quot; just to see if there was some visual clue that things were working in the form.&nbsp;&nbsp; Nothing changed.</p>\r\n<p>I then put a breakpoint at the top of my [HttpPost]Create handler, and the exception occured before the breakpoint (so it happens before I can do anything about it).</p>\r\n<p>I then put a breakpoint in the album metadata class.&nbsp; The breakpoint was never hit.</p>\r\n<p>So, it seems as if the code in Models/Albums.cs is never found or executed.&nbsp; This would explain why the model code is using the database field requirements (non-nulls).</p>\r\n<p>From what I can tell, my Album.cs file is exactly the same as the published code.&nbsp; The namespaces match up just fine as well.</p>\r\n<p>Am I missing something that needs re-wiring?</p>\r\n<p>Thanks again!</p>\r\n<p>Bill</p>\r\n<p>&nbsp;</p>\r\n<p>Update: I've been through your downloaded code to compare my work to yours.&nbsp; Of course, since I'm copying from your tutorial, there are no differences.&nbsp; I checked the Models/Album.cs, Controller/StoreManagerController.cs, Views/Shared/EditorTemplates/Album.csx, Views/StoreManager/Create.aspx, and found no real differences.</p>\r\n<p>Is there a build setting, or something like that I'm missing?&nbsp; I can't figure out why my execution path does not pull in the metadata partial class.</p>\r\n<p>Thanks again.</p>",
    "PostedDate": "2010-05-27T19:21:18.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "449416",
    "ThreadId": "211450",
    "Html": "<p>Hi Bill,</p>\r\n<p>Not sure how&nbsp;much this response&nbsp;will&nbsp;come close to answering your question, here is what I think.</p>\r\n<p>I assume that you&nbsp;are&nbsp;receving&nbsp;this error when you&nbsp;run the app in&nbsp;debug mode and have not implemented front end (javascript) validation yet.</p>\r\n<p>Given that, try to change the solution configuration (the dropdown&nbsp;that sits next to&nbsp;the right pointing green arrow for {F5} command) from Debug to Release and press ctrl+shift+B to build it. Now press ctrl+{F5}&nbsp; to run the app in release mode - without debugging., go to store manager, click on create new&nbsp; and hit save button. I believe, now you will be able to the error messages.</p>\r\n<p>On the other hand, if you run the app in debug mode, EF layer is validating for the nulls and&nbsp;pauses the app in breakmode. If you press continue to debug by pressing {F5}, then you will see the error messages as usual.</p>\r\n<p>When you implement javascript validation, then you would not see this difference because the validation occurs on the client side before it occurs on the server side.</p>\r\n<p>Hope this helps</p>\r\n<p>Regards, Vasu</p>",
    "PostedDate": "2010-05-30T18:39:51.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "449737",
    "ThreadId": "211450",
    "Html": "<p>Vasuvani,</p>\r\n<p>Thank you for the input.</p>\r\n<p>I stepped through the steps you suggested to switch the configuration from Debug to Release (rebuilding as well).&nbsp; Each configuration yields the same behavior, the exception is thrown.&nbsp; This is more of an FYI for you rather than any real info.</p>\r\n<p>You are correct however, when stating that continuing past the exception, the appropriate error messages to appear.</p>\r\n<p>I am going to go through the client-side validation, and what you said makes sense.&nbsp; I find it odd that the server only side can't get around the exception.&nbsp; At this point, this is more of a &quot;why did that happen&quot; type problem (given that the client validation works).</p>\r\n<p>So... any idea why the server-only validation gets the exception (in both Debug and Release configurations)?</p>\r\n<p>Curious minds need to know!</p>\r\n<p>B.</p>\r\n<p>&nbsp;</p>\r\n<p>UPDATE:</p>\r\n<p>I entered the wonderfully small amount of code for client-side validation and everything works as expected.&nbsp; Everything must be wired properly, so this makes me wonder even more about the server-side validation.&nbsp; Hmmmm...</p>",
    "PostedDate": "2010-05-31T14:41:04.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "449836",
    "ThreadId": "211450",
    "Html": "<p>@billbris</p>\r\n<p>yes, server-side validation <em><strong>should</strong></em> work as well. Maybe post the code somewhere - and the curious minds will find the answer together</p>",
    "PostedDate": "2010-05-31T23:47:45.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "450409",
    "ThreadId": "211450",
    "Html": "<p>@billbris,</p>\r\n<p>Just curious, Did you run it&nbsp;using {ctrl} + {F5} or just {F5}?</p>\r\n<p>Regards, Vasu</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-01T22:13:46.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "450623",
    "ThreadId": "211450",
    "Html": "@vasuvani,\r\n\r\nGood call... I just pressed F5.  Regardless of the configuration (debug and release), the F5 yielded the exception.  Using Ctrl+F5 the &quot;issue&quot; disappeared.\r\n\r\nProblem resolved.  Just part of the learning curve (for me anyway), that and read the suggestions more closely.\r\n\r\nThanks for all the help!\r\nB.",
    "PostedDate": "2010-06-02T07:40:03.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "475672",
    "ThreadId": "211450",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>jacne wrote:</strong><br>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;UpdateModel(album, &quot;Album&quot;);</p>\r\n</blockquote>\r\n<p>UpdateModel is designed to throw when the model isn't valid. If you want a version that doesn't throw, you should use TryUpdateModel. Either way, you should be checking ModelState.IsValid <em>after</em>&nbsp;you update the model.</p>\r\n<p>Alternatively, you could use implicit model binding by way of action parameters. Then you can check ModelState.IsValid right away, since the model binding happens before your action method is even called.</p>",
    "PostedDate": "2010-08-02T16:48:12.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "477534",
    "ThreadId": "211450",
    "Html": "<p>Hi.&nbsp; I am fairly new to MVC but from what I have read so far the&nbsp;it sounds like bradwilson is right that model binding is happening before the action method is even called (i believe this occurs when your action method automatically binds the FormCollection into your model when it is envoked.&nbsp; Correct me if I am wrong.)&nbsp; I believe this error is a direct result of the fact that the model is based off of a table that requires a value for that field in question.&nbsp; This is why I am still thinking it's best to base&nbsp;DB calls off of SP's in the database instead of the raw tables (no matter how you do data access: EL, EF, LINQ).</p>\r\n<p>Either way in my opinion the default model binding should not raise an exception in this case.&nbsp; It should create the model correctly even though the required data is missing and then raise the model's server side validation so it can be sent back to the user.&nbsp; In the event that the server side validation is turned off (please don't do it!) then the Entity Framework should raise an application error.&nbsp; It seems like this might be a bug in the Entity Framework -&gt; Model Binding implimentation especially if the use of direct table access using the Entity Framework is being promoted by all of the tutorials from Microsoft.</p>",
    "PostedDate": "2010-08-06T15:32:37.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "478704",
    "ThreadId": "211450",
    "Html": "I agree that the behavior of MVC + EF here seems less than ideal, but the exceptions which are thrown should be consumed internally by MVC, so you shouldn't really be seeing them. If you place [Required] attributes on the items, then you will get the appropriate required message.\r\n\r\nAlternative, you could model bind against view models rather then the direct EF objects, and then copy the values from the view model to the EF object (or using the model copier we put into MVC 2 Futures, which makes this a 1-liner).",
    "PostedDate": "2010-08-10T10:46:07.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "506296",
    "ThreadId": "211450",
    "Html": "<p>Hi everyone,</p>\r\n<p>I'm brand-new to MVC2 after a 3 year departure from .NET, so please bear with me.</p>\r\n<p>Has anyone presented a solution to get server-side validation working with this tutorial? When running the sample code, disabling the client-side validation causes exceptions if you say, leave off an Album title.</p>\r\n<p>TIA,<br>Brandon</p>",
    "PostedDate": "2010-10-12T15:02:37.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "506317",
    "ThreadId": "211450",
    "Html": "<p>Brandon - Welcome back! :-)</p>\r\n<p>The short answer there is that server side validation is working as expected. You will only see it when debugging your code in Visual Studio; the code won't throw exceptions when running in release mode.</p>\r\n<p>Longer answer: Those are expected exceptions, because that's how Entity Framework passes the constraint information back to the MVC framework. Since the EF model code is part of your project and Visual Studio's default behavior is to break on exceptions in code, you get an unnerving dialog that looks like an error, but it's not. I've clarified this in the new release of the tutorial, which was published last friday.</p>",
    "PostedDate": "2010-10-12T16:32:32.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]