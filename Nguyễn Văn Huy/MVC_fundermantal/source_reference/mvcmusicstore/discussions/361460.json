[
  {
    "Id": "855694",
    "ThreadId": "361460",
    "Html": "\r\n<div><span style=\"color:#888888\"><span style=\"color:#000000\"><span style=\"font-family:News702 BT; font-size:small\">\r\n<p><span style=\"font-size:small\">To Jon Galloway, </p>\r\n<p>Jon I would like to express my appreciation for your MusicStore tutorial, it has been a great help to me in learning MVC, EF and Razor. I am not a developer, but I like programming with VS 2010 Express, Visual Basic, WPF, MVC, EF and Razor; this is my hobby.\r\n Since I retired in 1997 my vocation has been my MVC website at bobagans.org, and since you state on the Acknowledgments page of\r\n<em>Professional ASP.NET MVC 3</em> that you look to &quot;Philippians 4:4-9 for continually reminding me which way is up,&quot; you may find it of some interest.</p>\r\n<p>The way that I use your tutorial is to copy your instructions in a word processor file, then I translate the C# code into VB and add it to my file; this gives me a chance to become more acquainted with C#, Razor and what the various sections of code accomplish\r\n in the application. I downloaded a VB version of MusicStore so I can compare them and learn. I realize that it would require a book to fully explain your tutorial, so I have settled down to doing some research and experimenting which lead me to using the shortcut\r\n method below. Many thanks for the effort you have put into developing this great and thorough tutorial.</p>\r\n<p>Bob</p>\r\n</span>\r\n<p></p>\r\n<p><span style=\"font-family:News702 BT; font-size:small\">Here&rsquo;s a shortcut method to building a Code&nbsp;First&nbsp;project. Instead of starting with an empty project template, as Jon does in his tutorial, we will start with an Internet Application project\r\n template, just as Jon does in the book he coauthored, <em>Professional ASP.NET MVC 3</em> on page 70. We then create the Classes and StoreManagerController before we create the StoreController. Here are the steps that I used:\r\n</span></p>\r\n<p>1. Build a new MvcMusicStore project with an Internet Application template, and add the latest Entity version</p>\r\n<p>2. Add an Artist class and add the code in Jon's tutorial</p>\r\n<p>3. Add a Genre class&nbsp;and add&nbsp;the code in Jon's tutorial</p>\r\n<p>4. Add an Album class&nbsp;and add&nbsp;the code in Jon's tutorial</p>\r\n<p>5. Build your project</p>\r\n<p>6. Add a StoreManagerController with:</p>\r\n<p style=\"padding-left:30px\">a. Template = read and write actions and views</p>\r\n<p style=\"padding-left:30px\">b. Model class = Album (MvcMusicStore.Models)</p>\r\n<p style=\"padding-left:30px\">c. Data context class = click New Data Context, then MvcMusicStore.Models.MusicStore.Context.</p>\r\n<p>&nbsp;7. <span style=\"font-size:small\">Run the application and browse to the StoreManager, then close down your app and add the next 4 blocks of code to the StoreManagerController that was created.</span></p>\r\n<p><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Get: /StoreManager/CreateGenre<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Function CreateGenre() As ViewResult<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return View()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Function<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Post: /StoreManager/CreateGenre<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;HttpPost()&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Function CreateGenre(genre As Genre) As ActionResult<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If ModelState.IsValid Then<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db.Genres.Add(genre)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db.SaveChanges()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return RedirectToAction(&quot;Index&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Function<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Get: /StoreManager/CreateArtist<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Function CreateArtist() As ViewResult<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return View()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Function<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Post: /StoreManager/CreateArtist<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;HttpPost()&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Function CreateArtist(artist As Artist) As ActionResult<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If ModelState.IsValid Then<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db.Artists.Add(artist)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db.SaveChanges()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return RedirectToAction(&quot;Index&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Function</span></span></p>\r\n<p>&nbsp;<span style=\"font-family:News702 BT; font-size:xx-small\"><span style=\"font-family:News702 BT; font-size:xx-small\"><span style=\"font-family:News702 BT; font-size:xx-small\"><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">8.\r\n Then add the view for creating Genres, right click in the CreateGenre method and choose AddView, check create a strongly-typed view, in the Model class check Genres (MvStore), in the Scaffold template choose Create and then add the view.</span></span></span></span></span></p>\r\n<p>&nbsp;<span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">9. Do the same for the Artist view except for checking Artists in the Model class.</span></span></p>\r\n<p><span style=\"font-family:Consolas; font-size:x-small\"><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">&nbsp;</span></span></span>10. In the StoreManager Index\r\n<strong>view</strong> substitute the 3 ActionLinks below for the one that was created.</p>\r\n<p><span style=\"font-family:News702 BT; font-size:xx-small\"><span style=\"font-family:News702 BT; font-size:xx-small\"><span style=\"font-family:News702 BT; font-size:xx-small\"><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">&nbsp;&nbsp;&nbsp;\r\n @Html.ActionLink(&quot;Create New Album___&quot;, &quot;Create&quot;)<br>\r\n&nbsp;&nbsp;&nbsp; @Html.ActionLink(&quot;Create New Genre___&quot;, &quot;CreateGenre&quot;)<br>\r\n&nbsp;&nbsp;&nbsp; @Html.ActionLink(&quot;Create New Artist___&quot;, &quot;CreateArtist&quot;)<br>\r\n</span></span></span></span></span></p>\r\n<p><span style=\"font-family:Consolas; font-size:x-small\"><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">11. When you follow the above way of creating your project you won&rsquo;t have to use any method\r\n to seed your database or link to it. You can merely browse to StoreManager, click on the Create New Genre ActionLink to add your Genres, click on the Create New Artist to add your Artists, and then click on Create New Album to add your Albums.</span></span></span></p>\r\n<p><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">12. Any changes you make that requires an adjustment to the database can be handled through Code First Migrations.</span></span></p>\r\n<p>&nbsp;&nbsp;Note: I found that if for any reason I viewed the database that EF created in step 7 above with SQL Server Management Studio or any other, I had to close down my computer, not just the application, and reboot or I would encounter an exception\r\n after I viewed the database. I&rsquo;m using VS 2010 Express so maybe this doesn&rsquo;t happen with the other versions.</p>\r\n<p><span style=\"color:#888888\"><span style=\"color:#000000\"><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\"><span style=\"font-family:News702 BT; font-size:small\">&nbsp;</span></span></span></span></span>Bob</p>\r\n</span></span></span></div>\r\n",
    "PostedDate": "2012-06-29T18:42:04.94-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]