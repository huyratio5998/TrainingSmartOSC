[
  {
    "Id": "610757",
    "ThreadId": "257160",
    "Html": "\r\n<p>Hi,<br>\r\n<br>\r\nI would like to modify the edit page so that a user can input a value for &quot;Artist&quot; and &quot;Album&quot; if it is not available on the drop down. Then this value would be saved to the DB just as if they had chosen a value from the drop down.\r\n<br>\r\n<br>\r\nCould anyone point me in the right direction on how to get this done?<br>\r\n<br>\r\nThanks!</p>\r\n",
    "PostedDate": "2011-05-11T00:19:32.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "611233",
    "ThreadId": "257160",
    "Html": "<p>Sounds like a great idea. You'll need to make two changes -&nbsp;in the view (/Views/StoreManager/Edit.cshtml) and in the controller action which handles updates from the Edit form submit (/Controllers/StoreManagerController.cs - <span class=\"typ\">Edit</span><span class=\"pun\">(</span><span class=\"typ\">Album</span><span class=\"pln\"> album</span><span class=\"pun\">)).</span></p>\r\n<ul>\r\n<li><span class=\"pun\">View:&nbsp;You'll need&nbsp;to change from&nbsp;the HTML&nbsp;select control to one that both shows the available genres and allows for entering new ones. One option is the jQueryUI AutoComplete control in ComboBox mode: <a href=\"http://jqueryui.com/demos/autocomplete/#combobox\">http://jqueryui.com/demos/autocomplete/#combobox</a></span></li>\r\n<li><span class=\"pun\">Action: That will take a little more work, since I think entering a new Genre may fail model validation. You'll need to detect a new Genre, save it, update the Album based on the new Genre ID, and save it.</span></li>\r\n</ul>\r\n<p><span class=\"pln\">This is an interesting exercise - if I can find some time, I'll blog it and update this with the code.<br /></span></p>",
    "PostedDate": "2011-05-11T14:03:23.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "611386",
    "ThreadId": "257160",
    "Html": "<p>Thanks for the direction. I will try to get this set up as you described over the next few days. If I succeed, I'll post the code here.<br /><br />Thanks,<br />Jonathan</p>",
    "PostedDate": "2011-05-11T19:39:18.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "623278",
    "ThreadId": "257160",
    "Html": "<p>Hi,<br /><br />Wondering if you have had a chance to try implementing this exercise. <br /><br />I have set up the UI changes with the combobox, but I am stuck on how to update the Genre class with the new entry. Since the 'Create' and 'Edit' views are strongly typed to the Album class, what is the best way to access the Genre class from within this view and add a new Genre.<br /><br /> I could create a new view strongly typed to Genre and add new Genres there, then return to the Album \"Create\" or \"Edit\" views and use the newly-added&nbsp; Genre, but it would be much nicer to be able to do everything in one view.</p>\r\n<p>Thanks for any hints you can provide on this.<br /><br />Thanks,</p>\r\n<p>Jonathan</p>",
    "PostedDate": "2011-06-05T19:39:38.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "629848",
    "ThreadId": "257160",
    "Html": "<p>I'd be pretty stoked to see this as an additional tutorial too! Just getting into MVC and your tut is awesome! I'm trying to create my own blog app and this is basically where I'm stuck.. instead of genre I'm calling categories, but as u say, the validation is a bit tricky and keeps preventing me from saving. I've even stripped everything but the blog title, and the category to try to figure it out, but I'm such a newb I just don't know enough C# or LINQ yet. The best I've managed to pull off created the categories inside the blog table so I knew then I was heading away from the solution.</p>\r\n<p>Hope you get some time for this one!</p>\r\n<p>Thanks again for the great tut and project!</p>",
    "PostedDate": "2011-06-19T16:19:07.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "632838",
    "ThreadId": "257160",
    "Html": "<p>I haven't done this yet - I'll try to do it next week.</p>",
    "PostedDate": "2011-06-24T17:02:13.27-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "632842",
    "ThreadId": "257160",
    "Html": "<p>Thanks Jon! I'd be glad to offer some kind of donation for your time if it helps at all... I'm sure this tut is helping a ton of people get into MVC3.</p>",
    "PostedDate": "2011-06-24T17:08:16.57-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "632862",
    "ThreadId": "257160",
    "Html": "<p>I came up with a workaround for this scenario, but would love to hear some other solutions too...<br /> <br /> The combobox doesn't allow any text to be entered that isn't part of the underlying list, so I left that part as is and added a small link below it that says \"Artist not in list? Add a new one here.\" This opens up a modal (I used jQuery colorbox) that sources  in the ArtistManager/Create/ view that is strongly typed to Artist (I used the scaffolding feature to create an ArtistManager controller).<br /> <br /> When the artist is added and the modal closes a callback function axaj-refreshes the combobox dropdown to include the newly added Artist in the list. <br /> <br /> I also separated the Artist combobox &amp; underlying DropDownList into it's own Partial View and wrote it's own controller that returns the refreshed Select list when the callback ajax .load() call is made to it.<br /> <br /> So it would still be nicer if the user could add and select a new Artist at the same time through the ui, but this 2-step process seems to work ok for now.</p>",
    "PostedDate": "2011-06-24T19:19:05.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]