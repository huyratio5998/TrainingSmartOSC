{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 10,
    "Custom": null,
    "Description": "If you try and update an album, you get a concurrency error. For all albums, regardless of whether they are the pre-seeded albums or ones that you add yourself.",
    "LastUpdatedDate": "2013-04-29T10:45:11.197-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "mvcmusicstore",
    "ReportedDate": "2011-04-26T09:26:08.717-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Unable to Update Album",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 6,
    "Id": 6648
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I think I've figured out the issue (I could be wrong, this is the first time I've tried EF).\n\nIn the Album class, you've defined [Bind(Exclude = \"AlbumId\")] on the class, which means that the code won't try and bind the AlbumId from the form. Which is fine, except that on the edit page, you're passing in a populated Album, which is presumably being populated using binding, which is of course ignoring the Album Id, so the AlbumId of the object passed into the edit method, is always 0, which throws a misleading concurrency error, because no rows are affected, because there's no album with ID of 0.\n\nIf you remove the bind/exclude attribute, then the edit page works as expected.",
      "PostedDate": "2011-04-26T15:44:12.66-07:00",
      "Id": 34843
    },
    {
      "Message": "Which version of the tutorial are you using?",
      "PostedDate": "2011-04-28T18:01:39.45-07:00",
      "Id": 34995
    },
    {
      "Message": "It was using the latest version (3.0). If you download the finished code and run it, and try to edit an album, you should see the error.",
      "PostedDate": "2011-04-30T09:18:41.857-07:00",
      "Id": 35049
    },
    {
      "Message": "This problem has really troubled me for a long, thank u for the solution",
      "PostedDate": "2011-04-30T23:09:42.293-07:00",
      "Id": 35055
    },
    {
      "Message": "Hi there after removing the exlude binding I still had the error, I ended up adding the recordID field to my view, as a hidden field , and the recordID was passed through as expected ",
      "PostedDate": "2011-06-04T16:41:07.773-07:00",
      "Id": 36983
    },
    {
      "Message": "I posted this question on SO which is the same problem. I thought it was something wrong with my refactoring.\n\nhttp://stackoverflow.com/questions/6410813/model-id-changes-when-past-to-the-httppost-method",
      "PostedDate": "2011-06-21T04:32:53.693-07:00",
      "Id": 38025
    },
    {
      "Message": "\nThere is another solution for this here:\nhttp://mvcmusicstore.codeplex.com/discussions/264765\n\nwhich involves addding the index of the album to be edited as the second parameter to this function in StoreManagerController: \n        [HttpPost]\n        public ActionResult Edit(Album album, int id)\n        {\n            if (ModelState.IsValid)\n            {\n                album.AlbumId = id;\n                db.Entry(album).State = EntityState.Modified;\n                db.SaveChanges();\n                return RedirectToAction(\"Index\");\n            }\n            ViewBag.GenreId = new SelectList(db.Genres, \"GenreId\", \"Name\", album.GenreId);\n            ViewBag.ArtistId = new SelectList(db.Artists, \"ArtistId\", \"Name\", album.ArtistId);\n            return View(album);\n        }\n\n\nNew to this, so not sure which is the best fix.\nAny comment?",
      "PostedDate": "2011-08-05T07:59:02.257-07:00",
      "Id": 42032
    },
    {
      "Message": "\nThere is another solution for this here:\nhttp://mvcmusicstore.codeplex.com/discussions/264765\n\nwhich involves addding the index of the album to be edited as the second parameter to this function in StoreManagerController: \n        [HttpPost]\n        public ActionResult Edit(Album album, int id)\n        {\n            if (ModelState.IsValid)\n            {\n                album.AlbumId = id;\n                db.Entry(album).State = EntityState.Modified;\n                db.SaveChanges();\n                return RedirectToAction(\"Index\");\n            }\n            ViewBag.GenreId = new SelectList(db.Genres, \"GenreId\", \"Name\", album.GenreId);\n            ViewBag.ArtistId = new SelectList(db.Artists, \"ArtistId\", \"Name\", album.ArtistId);\n            return View(album);\n        }\n\n\nNew to this, so not sure which is the best fix.\nAny comment?",
      "PostedDate": "2011-08-05T07:59:53.387-07:00",
      "Id": 42033
    },
    {
      "Message": "ah, new posts at the top. Sorry for doublepost",
      "PostedDate": "2011-08-05T08:01:22.93-07:00",
      "Id": 42034
    },
    {
      "Message": "\nMonkimo's solution that worked for me was to simply remove  __[Bind(Exclude = \"AlbumId\")]__  in Album class. \n\nTo Jon,\n\nYes, this is the current version of your app, as of April 2013 that still has bug on edit. Obviously, not a lot of testing done here... but since you are letting your users test , you should at least address / correct the bugs you find. \n\nI dont expect comments to offer  explanation of why the  [Bind(Exclude = \"AlbumId\")] was included in the first place. But you could/should.\n\nThe assumption is that a tutorial works.  Maybe your approach is to add a lot of bugs, and let users hone their debugging skills. If that is your approach, fine - a word of warning would have saved a lot of people wasted hours. ",
      "PostedDate": "2013-04-29T10:45:11.197-07:00",
      "Id": 98811
    }
  ]
}