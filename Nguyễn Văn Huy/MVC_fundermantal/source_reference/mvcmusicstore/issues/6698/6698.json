{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I am using the MVC Music store tutorial application. I have changed 3 of the original classnames (renamed them) of the application namely Genre,Album and Artist and have named them as Categories,Brands and Types respectively.\r\n\r\nI have updated all the references everywhere. So after this what I have is the same application and database values but with the NAMES which I WANT.\r\n\r\nIn the SampleData.cs which is the seed class, when I add new values to the list as per my requirements, I didnt see any changes being reflected in the database and on running the application the same values were displayed again.\r\n\r\nLater when I managed to perform the changes through the seed class, instead of populating the database it started showing NULL values and is now giving an error as attached in Capture.\r\n\r\n\r\nCode for the sampledata.cs SEED class:\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Data.Entity;\r\n\r\nnamespace MvcMusicStore.Models\r\n{\r\n    public class SampleData : DropCreateDatabaseAlways<MusicStoreEntities>\r\n    {\r\n        protected override void Seed(MusicStoreEntities context)\r\n        {\r\n            var genres = new List<Categories>\r\n            {\r\n               new Categories { Name = \"Guitars\" },\r\n               new Categories { Name = \"Keyboards\" },\r\n               new Categories { Name = \"Drums\" },\r\n               new Categories { Name=\"Amplifiers\"}\r\n               \r\n            };\r\n\r\n            var artists = new List<Type>\r\n            {\r\n                new Type{Name=\"Electric SDC-22 -Sunburst SDC22-UB\"},\r\n                new Type{Name=\"Electric Virage 33 Double Cut-away -Black VS SDC33BK\"},\r\n                new Type{Name=\"Electric Les Paul Studio -Vintage Sunburst Chrome LPSTUVSCH1\"},\r\n                new Type{Name=\"Electric Les Paul Custom -Heritage Cherry Sunburst LPC-HSGH1\"},\r\n                new Type{Name=\"RG-550\"},\r\n                new Type{Name=\"PM100\"},\r\n                new Type{Name=\"RG-370DX\"},\r\n                new Type{Name=\"XM-N502\"},\r\n                new Type{Name=\"GM-A3602\"},\r\n                new Type{Name=\"Electronic WK-7500\"},\r\n                new Type{Name=\"Arranger Keyboard PA-500\"},\r\n                new Type{Name=\"Electronic Keyboard, PSR S-750\"},\r\n                new Type{Name=\"Drum Set, Tornado, 5 pcs, w/Hardware, Throne & Cymbals, TNM5254TCUDK \"},\r\n                new Type{Name=\"Drum Set, 5 Pcs, BRP, Without Hardware /Piano Black \"},\r\n                new Type{Name=\"Drum Set, Target, 5 Pc, with Black Hardware -Steel Blue TGB625 (72) \"},\r\n                new Type{Name=\"Drum Set, GM2F52 -Black (Tom / Snare Drum)  \"},\r\n\r\n            };\r\n\r\n            new List<Brands>\r\n            {\r\n               // new Brands { Title = \"The Best Of Men At Work\", Genre = genres.Single(g => g.Name == \"Rock\"), Price = 8.99M, Artist = artists.Single(a => a.Name == \"Men At Work\"), AlbumArtUrl = \"/Content/Images/placeholder.gif\" },\r\n                //new Brands { Title = \"A Copland Celebration, Vol. I\", Genre = genres.Single(g => g.Name == \"Classical\"), Price = 8.99M, Artist = artists.Single(a => a.Name == \"Aaron Copland & London Symphony Orchestra\"), AlbumArtUrl = \"/Content/Images/placeholder.gif\" },\r\n                //new Brands { Title = \"Worlds\", Genre= genres.Single(g => g.Name == \"Jazz\"), Price = 8.99M, Artist = artists.Single(a => a.Name == \"Aaron Goldberg\"), AlbumArtUrl = \"/Content/Images/placeholder.gif\" },\r\n                //new Brands { Title = \"For Those About To Rock We Salute You\", Genre = genres.Single(g => g.Name == \"Rock\"), Price = 8.99M, Artist = artists.Single(a => a.Name == \"AC/DC\"), AlbumArtUrl = \"/Content/Images/placeholder.gif\" },\r\n             \r\n                new Brands{Title=\"IBANEZ\", Genre=genres.Single(c=>c.Name==\"Guitars\"), Price=2000, Artist=artists.Single(t=>t.Name==\"RG-550\"), AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n              //  new Brands{Title=\"IBANEZ\", Genre=genres.Single(c=>c.Name==\"Guitars\"),Price=2000,Artist=artists.Single(t=>t.Name==\"PM100\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n             //   new Brands{Title=\"IBANEZ\", Genre=genres.Single(c=>c.Name==\"Guitars\"),Price=2000,Artist=artists.Single(t=>t.Name==\"RG370-DX\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n              //  new Brands{Title=\"VOX\", Genre=genres.Single(c=>c.Name==\"Guitars\"),Price=2000,Artist=artists.Single(t=>t.Name==\"Electric SDC-22 -Sunburst SDC22-UB\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n                new Brands{Title=\"CASIO\", Genre=genres.Single(c=>c.Name==\"Keyboards\"),Price=2000,Artist=artists.Single(t=>t.Name==\"Electronic WK-7500\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n               // new Brands{Title=\"PIONEER\", Genre=genres.Single(c=>c.Name==\"Keyboards\"),Price=2000,Artist=artists.Single(t=>t.Name==\"Arranger Keyboard PA-500\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n                //new Brands{Title=\"MAPEX\", Genre=genres.Single(c=>c.Name==\"Drums\"),Price=2000,Artist=artists.Single(t=>t.Name==\"Drum Set, Tornado, 5 pcs, w/Hardware, Throne & Cymbals, TNM5254TCUDK\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n                //new Brands{Title=\"YAMAHA\", Genre=genres.Single(c=>c.Name==\"Drums\"),Price=2000,Artist=artists.Single(t=>t.Name==\"Drum Set, GM2F52 -Black (Tom / Snare Drum)\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n                new Brands{Title=\"PEARL\",Genre=genres.Single(c=>c.Name==\"Drums\"),Price=2000,Artist=artists.Single(t=>t.Name==\"Drum Set, 5 Pcs, BRP, Without Hardware /Piano Black \"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n                //new Brands{Title=\"SONY\", Genre=genres.Single(c=>c.Name==\"Amplifiers\"),Price=2000,Artist=artists.Single(t=>t.Name==\"XM-N502\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n                new Brands{Title=\"PIONEER\", Genre=genres.Single(c=>c.Name==\"Amplifiers\"),Price=2000,Artist=artists.Single(t=>t.Name==\"GM-A3602\"),AlbumArtUrl=\"/Content/Images/placeholder.gif\"},\r\n            }.ForEach(a => context.Albums.Add(a));\r\n        }\r\n    }\r\n}\r\n```\r\nCategories.cs\r\n\r\n\r\n```\r\nusing System.Collections.Generic;\r\n\r\nnamespace MvcMusicStore.Models\r\n{\r\n    public partial class Categories\r\n    {\r\n        public int CategoriesId { get; set; }\r\n        public string Name { get; set; }\r\n        public string Description { get; set; }\r\n        public List<Brands> Albums { get; set; }\r\n    }\r\n}\r\n\r\n```\r\nBrands.cs\r\n```\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Web.Mvc;\r\nusing System.Collections.Generic;\r\n\r\nnamespace MvcMusicStore.Models\r\n{\r\n    [Bind(Exclude = \"BrandsId\")]\r\n    public class Brands\r\n    {\r\n        [ScaffoldColumn(false)]\r\n        public int BrandsId { get; set; }\r\n\r\n        [DisplayName(\"Genre\")]\r\n        public int CategoriesId { get; set; }\r\n\r\n        [DisplayName(\"Artist\")]\r\n        public int TypeId { get; set; }\r\n\r\n        [Required(ErrorMessage = \"An Album Title is required\")]\r\n        [StringLength(160)]\r\n        public string Title { get; set; }\r\n\r\n        [Required(ErrorMessage = \"Price is required\")]\r\n        [Range(0.01, 100.00,\r\n            ErrorMessage = \"Price must be between 0.01 and 100.00\")]\r\n        public decimal Price { get; set; }\r\n\r\n        [DisplayName(\"Album Art URL\")]\r\n        [StringLength(1024)]\r\n        public string AlbumArtUrl { get; set; }\r\n\r\n        public virtual Categories Genre { get; set; }\r\n        public virtual Type Artist { get; set; }\r\n        public virtual List<OrderDetail> OrderDetails { get; set; }\r\n    }\r\n}\r\n`\r\n``\r\n\r\nType.cs\r\n\r\n```\r\nnamespace MvcMusicStore.Models\r\n{\r\n    public class Type\r\n    {\r\n        public int TypeId { get; set; }\r\n        public string Name { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nHELP WOULD BE APPRECIATED THANK YOU.",
    "LastUpdatedDate": "2014-03-18T02:27:34.92-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "mvcmusicstore",
    "ReportedDate": "2014-03-18T02:25:30.463-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "MVC Music Store",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 6698
  },
  "FileAttachments": [
    {
      "FileId": 815167,
      "FileName": "Capture.JPG",
      "DownloadUrl": ".\\815167"
    }
  ],
  "Comments": []
}